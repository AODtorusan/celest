/**
 * Copyright (C) 2009-2012 simon <simon@angelcorp.be>
 *
 * Licensed under the Non-Profit Open Software License version 3.0
 * (the "License"); you may not use this file except in compliance
 * with the License. You may obtain a copy of the License at
 *
 *        http://www.opensource.org/licenses/NOSL3.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package be.angelcorp.libs.celest.frames;

import be.angelcorp.libs.celest.time.Epoch;

/**
 * Factory that creates a {@link CompositeFrameTransform} from two other
 * {@link IReferenceFrameTransformFactory}'s. So, it creats a transform that sequentially applies two
 * transforms generated by two provided factories:
 * 
 * <p>
 * $$ x_2 = T_{1 \to 2}( T_{0 \to 1}( x_0 )) $$
 * </p>
 * With;
 * <ul>
 * <li>\(x_a\): A state in reference frame a.</li>
 * <li>\(T_{a \to b}\): The transform of a state from reference frame a to b.</li>
 * </ul>
 * 
 * @author Simon Billemont
 * 
 * @param <F0>
 *            Generate a transform that originates in this frame.
 * @param <F1>
 *            The intermediate frame between the two transforms.
 * @param <F2>
 *            Resulting frame of the transformation produced.
 */
public class CompositeFrameTransformFactory<F0 extends IReferenceFrame, F1 extends IReferenceFrame, F2 extends IReferenceFrame>
		extends BasicReferenceFrameTransformFactory<F0, F2> {

	/** First factory producing transforms from F0 => F1 */
	private final IReferenceFrameTransformFactory<F0, F1>	factory0;
	/** Second factory producing transforms from F1 => F2 */
	private final IReferenceFrameTransformFactory<F1, F2>	factory1;

	/**
	 * Create a new factory that combines the transformations of the two provided factories.
	 * 
	 * @param factory0
	 *            First factory producing transforms from F1 => F2
	 * @param factory1
	 *            Second factory producing transforms from F1 => F2
	 */
	public CompositeFrameTransformFactory(
			IReferenceFrameTransformFactory<F0, F1> factory0, IReferenceFrameTransformFactory<F1, F2> factory1) {
		this.factory0 = factory0;
		this.factory1 = factory1;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public double getCost(Epoch epoch) {
		double totalCost = factory0.getCost(epoch) + factory1.getCost(epoch);
		return totalCost;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public CompositeFrameTransform<F0, F1, F2> getTransform(Epoch epoch) {
		IReferenceFrameTransform<F0, F1> frame0 = factory0.getTransform(epoch);
		IReferenceFrameTransform<F1, F2> frame1 = factory1.getTransform(epoch);

		CompositeFrameTransform<F0, F1, F2> transform = new CompositeFrameTransform<>(this, epoch, frame0, frame1);
		return transform;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public CompositeFrameTransformFactory<F2, F1, F0> inverse() {
		IReferenceFrameTransformFactory<F2, F1> inverse0 = factory1.inverse();
		IReferenceFrameTransformFactory<F1, F0> inverse1 = factory0.inverse();

		CompositeFrameTransformFactory<F2, F1, F0> inverseFactory =
				new CompositeFrameTransformFactory<>(inverse0, inverse1);

		return inverseFactory;
	}

}
