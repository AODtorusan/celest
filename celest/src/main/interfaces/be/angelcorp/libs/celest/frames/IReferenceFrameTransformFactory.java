/**
 * Copyright (C) 2009-2012 simon <simon@angelcorp.be>
 *
 * Licensed under the Non-Profit Open Software License version 3.0
 * (the "License"); you may not use this file except in compliance
 * with the License. You may obtain a copy of the License at
 *
 *        http://www.opensource.org/licenses/NOSL3.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package be.angelcorp.libs.celest.frames;

import be.angelcorp.libs.celest.time.IJulianDate;

/**
 * Factory construct capable of creating a {@link IReferenceFrameTransform} between two different
 * {@link IReferenceFrame}'s.
 * 
 * @author Simon Billemont
 * 
 * @param <F0>
 *            Transform from this {@link IReferenceFrame}.
 * @param <F1>
 *            Transform to this {@link IReferenceFrame}.
 */
public interface IReferenceFrameTransformFactory<F0 extends IReferenceFrame, F1 extends IReferenceFrame> {

	/**
	 * Apply another {@link IReferenceFrameTransformFactory} on top of this transformFactory, so that the
	 * resulting transformationFactory produces transforms which start at the same frame as the staring
	 * frame of this factory, and results in the final frame of the given factory.
	 * 
	 * @param other
	 *            {@link IReferenceFrameTransformFactory} to add to this factory.
	 * @return A {@link IReferenceFrameTransformFactory} from {@link F0} to {@link F2}.
	 */
	public abstract <F2 extends IReferenceFrame> IReferenceFrameTransformFactory<F0, F2>
			add(IReferenceFrameTransformFactory<F1, F2> other);

	/**
	 * Rough estimate of the number of operations required to <b>create and apply</b> a
	 * {@link IReferenceFrame}.
	 * 
	 * <p>
	 * This method is used to find optimal (performance wide) transfers between different frames when
	 * multiple paths are possible. It is important to make this method <b>fast</b>. Possible checks
	 * include, checking the existence of cache variable, if all required data files have been loaded,
	 * ...
	 * </p>
	 * 
	 * @param epoch
	 *            Epoch at which to construct and apply a potential transform.
	 * @return Rough cost estimate of creating/applying this a {@link IReferenceFrameTransform}.
	 */
	public abstract double getCost(IJulianDate epoch);

	/**
	 * Get a new transform that, when applied, transforms from {@link F0} to {@link F1}.
	 * 
	 * @param epoch
	 *            Epoch at which the {@link IReferenceFrameTransform} must be valid.
	 * @return An transformation between the specified {@link IReferenceFrame}'s.
	 */
	public abstract IReferenceFrameTransform<F0, F1> getTransform(IJulianDate epoch);

	/**
	 * Get a new transformFactory that produces transforms that undo the effects of the transforms
	 * generated by this transformFactory. This means:
	 * 
	 * <pre>
	 * IJulianDate t;
	 * f = this.getTransform(t);
	 * g = this.inverse().getTransform(t);
	 * v = g.transform(f.transform(v))
	 * </pre>
	 * 
	 * @return An inverse transformation of this {@link IReferenceFrameTransform}
	 */
	public abstract IReferenceFrameTransformFactory<F1, F0> inverse();
}